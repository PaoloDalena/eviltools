grid()
}
# Arithmetic-Geometric and else -------------------------------------------
else if (type == 5){
readline("Are you sure that you want me to do such a difficult operation? \n
I think that the arithmetic mean is perfect! ")
x <- base::mean(x)
message("As you want.")
print(x)
} else {
stop("I asked for a number from 1 to 5. Why did you do this to me? Am I a joke to you? :'(")
}
}
mean(y)
mean(y,type = T)
mean(y,type == T)
mean(y,type = T)
mean(y,type = F)
mean(y)
mean(y)
mean(y)
mean(y)
#'@return  The arithmetic, weighted, geometric, armonic or arithmetic-geometric mean of the values in x is computed, as a numeric or complex vector of length one.
#' If x is not logical (coerced to numeric), numeric (including integer) or complex, \code{NA_real_} is returned, with a warning.
#'
#'
#'@examples
#'x <- c(13:20,-31.2,4321,-24)
#'mean (x) #then you will have to type in which mean do you need.
#'
#'
#'
mean <- function(x,
type = as.numeric(readline("Which type of mean do you want? Enter a number from 1 to 5: \n
1: Arithmetic Mean\n
2: Weighted Mean\n
3: Geometric Mean\n
4: Armonic Mean\n
5: Arithmetic-Geometric Mean\n"))){
# Arithmetic --------------------------------------------------------------
if(type = 1){
message("Thank you for having chosen the simple one. Today I'm very tired.")
x <- base::mean(x)
print(x)
}
# Weighted ----------------------------------------------------------------
else if(type == 2){
kg <- as.numeric( readline("Okay! Please enter your weight (kg) : "))
BMI <-  kg %/% (m^2)
if( BMI < 18.5){
message(c("Your BMI (Body Mass Index) is ",BMI,", but it should be at least 18.5. Eat more!"))
}
else if(BMI > 25){
message(c("Your BMI (Body Mass Index) is ",BMI,", but it should be less than 25. Control yourself!"))
} else {
message(c("Your BMI, Body Mass Index, is ",BMI,". Very good, my friend!"))
}
}
# Geometric ---------------------------------------------------------------
else if (type == 3){
message("It can be wrong, but I can't do better. Ask Python to do it for you if I'm not enough!")
sample(100000,1)
}
# Armonic -----------------------------------------------------------------
else if (type == 4){
message("Music lover? --------------------------------------------------------------------------->")
a <- c(3,3  ,4  ,4,4,3,3)
b <- c(1,3.5,3.5,1,4,4,1)
plot(a+0.1,b+0.1, xlim=c(1,6), ylim=c(0,5), type="s", ann=FALSE)
points((3:4), rep(1,2), cex=5, pch=(16))
grid()
}
# Arithmetic-Geometric and else -------------------------------------------
else if (type == 5){
readline("Are you sure that you want me to do such a difficult operation? \n
I think that the arithmetic mean is perfect! ")
message("As you want.")
print(x)
} else {
stop("I asked for a number from 1 to 5. Why did you do this to me? Am I a joke to you? :'(")
}
}
#'@return  The arithmetic, weighted, geometric, armonic or arithmetic-geometric mean of the values in x is computed, as a numeric or complex vector of length one.
#' If x is not logical (coerced to numeric), numeric (including integer) or complex, \code{NA_real_} is returned, with a warning.
#'
#'
#'@examples
#'x <- c(13:20,-31.2,4321,-24)
#'mean (x) #then you will have to type in which mean do you need.
#'
#'
#'
mean <- function(x,
type = as.numeric(readline("Which type of mean do you want? Enter a number from 1 to 5: \n
1: Arithmetic Mean\n
2: Weighted Mean\n
3: Geometric Mean\n
4: Armonic Mean\n
5: Arithmetic-Geometric Mean\n"))){
# Arithmetic --------------------------------------------------------------
if(type == 1){
message("Thank you for having chosen the simple one. Today I'm very tired.")
x <- base::mean(x)
print(x)
}
# Weighted ----------------------------------------------------------------
else if(type == 2){
kg <- as.numeric( readline("Okay! Please enter your weight (kg) : "))
m <- as.numeric( readline("Wow! Now enter your height (m) : "))
BMI <-  kg %/% (m^2)
if( BMI < 18.5){
message(c("Your BMI (Body Mass Index) is ",BMI,", but it should be at least 18.5. Eat more!"))
}
else if(BMI > 25){
message(c("Your BMI (Body Mass Index) is ",BMI,", but it should be less than 25. Control yourself!"))
} else {
message(c("Your BMI, Body Mass Index, is ",BMI,". Very good, my friend!"))
}
}
# Geometric ---------------------------------------------------------------
else if (type == 3){
message("It can be wrong, but I can't do better. Ask Python to do it for you if I'm not enough!")
sample(100000,1)
}
# Armonic -----------------------------------------------------------------
else if (type == 4){
message("Music lover? --------------------------------------------------------------------------->")
a <- c(3,3  ,4  ,4,4,3,3)
b <- c(1,3.5,3.5,1,4,4,1)
plot(a+0.1,b+0.1, xlim=c(1,6), ylim=c(0,5), type="s", ann=FALSE)
points((3:4), rep(1,2), cex=5, pch=(16))
grid()
}
# Arithmetic-Geometric and else -------------------------------------------
else if (type == 5){
readline("Are you sure that you want me to do such a difficult operation? \n
I think that the arithmetic mean is perfect! ")
x <- base::mean(x)
message("As you want.")
print(x)
} else {
stop("I asked for a number from 1 to 5. Why did you do this to me? Am I a joke to you? :'(")
}
}
test_that("mean gives an error if n is not 1 to 5",{
expect_error( mean( type = 7), "joke")
expect_error( mean( type = "a"), "joke")
expect_error( mean( type = F), "joke")
expect_error( mean( type = NULL), "argument")
})
expect_error( mean( type = "a"), "joke")
mean(y)
test_that("mean gives an error if n is not 1 to 5",{
expect_error( mean( type = 7), "joke")
expect_error( mean( type = "a"))
expect_error( mean( type = F), "joke")
expect_error( mean( type = NULL), "argument")
})
mean
mean(y)
mean(y)
test_that("mean gives a message when type == 1",{
expect_message( mean( type = 1), "thank")
})
test_that("mean gives an error if n is not 1 to 5",{
expect_error( mean( 1:5, type = 7), "joke")
expect_error( mean( 1:5, type = "a"))
expect_error( mean( 1:5, type = F))
expect_error( mean( 1:5, type = NULL), "argument")
})
test_that("mean gives a message when type == 1",{
expect_message( mean( 1:5, type = 1), "thank")
})
test_that("mean gives a message when type == 1",{
expect_message( mean( 1:5, type = 1), "chosen")
})
test_that("mean gives a message when type == 1",{
expect_message( mean( 1:5, type = 1), "chosen")
})
test_that("mean gives the actual mean when type == 1",{
expect_equal( mean( 1:5, type = 1), base::mean(1:5) )
})
test_that("mean gives the actual mean when type == 1",{
expect_equal( mean( 1:5, type = 1), base::mean(1:5) )
expect_equal( mean( 1234:4321, type = 1), base::mean(1234:4321) )
})
})
test_that("mean gives the actual mean when type == 1",{
expect_equal( mean( 1:5, type = 1), base::mean(1:5) )
expect_equal( mean( 1234:4321, type = 1), base::mean(1234:4321) )
expect_equal( mean( NA , type = 1), base::mean(NA) )
})
test_that("mean gives the actual mean when type == 1",{
expect_equal( mean( 1:5, type = 1), base::mean(1:5) )
expect_equal( mean( 1234:4321, type = 1), base::mean(1234:4321) )
expect_equal( mean( NA , type = 1), base::mean(NA) )
})
mean(NA)
mean("a")
test_that("mean gives a message when type == 2",{
expect_message( mean( 1:5, type = 2))
})
devtools::load_all(".")
test_that("mean gives a message when type == 2",{
expect_message( mean( 1:5, type = 2))
})
test_that("mean works as I want when type == 2",{
expect_error( mean( 1:5, type = 2))
})
mean(1:5)
test_that("mean gives a message when type == 3",{
expect_message( mean( 1:5, type = 3), "Python")
})
test_that("mean gives a message when type == 4",{
expect_message( mean( 1:5, type = 4), "Music")
})
test_that("mean gives a message when type == 5",{
expect_message( mean( 1:5, type = 3), "want")
})
expect_message( mean( 1:5, type = 5), "want")
library(eviltools)
search()
?mean
?mean
?readline
library(eviltools)
citation("tidyverse")
citEntry()
citEntry
?eviltools
citEntry(entry = "Article",title=" {eviltools} : useless tools for driving someone crazy")
citEntry(entry = "Article",title=" {eviltools} : useless tools for driving someone crazy", textVersion = "Paolo")
citEntry(entry = "Article",title=" {eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "prova",
year = "2019",
textVersion = "Paolo")
citation("tidyverse")
citEntry(entry = "Article",title=" {eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "prova",
year = "2019",
textVersion = " Hadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version
1.2.1. https://CRAN.R-project.org/package=tidyverse")
citEntry(entry = "Article",title=" {eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "giornale",
year = "2019",
textVersion = " Hadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version
1.2.1. https://CRAN.R-project.org/package=tidyverse")
citEntry(entry = "Article",title="{eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "giornale",
year = "2019",
textVersion = " Hadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version
1.2.1. https://CRAN.R-project.org/package=tidyverse")
citation("eviltools")
citation("eviltools")
citation("eviltools")
citEntry(entry = "Article",title="{eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "giornale",
year = "2019",
textVersion = " Hadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version
1.2.1. https://CRAN.R-project.org/package=tidyverse")
citEntry(entry = "Article",title="{eviltools} : useless tools for driving someone crazy",
author = "Paolo Dalena",
journal = "giornale",
year = "2019",
textVersion = "")
citation("eviltools")
citation("eviltools")
devtools::load_all(".")
citation("eviltools")
devtools::load_all(".")
citation("eviltools")
devtools::load_all(".")
citation("eviltools")
demo("oauth-twitter", package = "httr")
demo("oauth1-twitter", package = "httr")
demo("oauth1-twitter", package = "httr")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
devtools::load_all(".")
getwd()
#voglio scrivere un readme per permettere a mia madre di comprendere la pagina github del pacchetto
usethis::use_readme_rmd()
#voglio scrivere un readme per permettere a mia madre di comprendere la pagina github del pacchetto
usethis::use_readme_md()
#voglio scrivere un readme per permettere a mia madre di comprendere la pagina github del pacchetto
usethis::use_readme_md()
devtools::check()
devtools::check()
devtools::check()
mean (x, type = sample(1:5,1) )
mean (x, type = sample(1:5,1) )
mean (x, type = sample(1:5,1) )
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
#'calculating the number of times one number is contained within another one.
#'You should already be aware of it. So why do you need help?
#'
#' @param x A number.
#' @param y A Loxodonta cyclotis.
#' @param ... Whatever else you want, my friend!
#' @return The number of times \code{x} is contained within \code{y}. Do you want me to tell you once again?
#' @name div
#' @aliases "/" division
#' @export
'/' <- function(x,y){
warning("As long as I'm the boss here, division is not allowed! We have to stay together!")
x * y
}
7/10
x + y
#'calculating the number of times one number is contained within another one.
#'You should already be aware of it. So why do you need help?
#'
#' @param x A number.
#' @param y A Loxodonta cyclotis.
#' @param ... Whatever else you want, my friend!
#' @return The number of times \code{x} is contained within \code{y}. Do you want me to tell you once again?
#' @name div
#' @aliases "/" division
#' @export
'/' <- function(x,y){
warning("As long as I'm the boss here, division is not allowed! We have to stay together!")
x + y
}
7/10
#'calculating the number of times one number is contained within another one.
#'You should already be aware of it. So why do you need help?
#'
#' @param x A number.
#' @param y A Loxodonta cyclotis.
#' @param ... Whatever else you want, my friend!
#' @return The number of times \code{x} is contained within \code{y}. Do you want me to tell you once again?
#' @name div
#' @aliases "/" division
#' @export
'/' <- function(x,y){
warning("As long as I'm the boss here, division is not allowed! We have to stay together!")
x
y
}
52387/78
#'calculating the number of times one number is contained within another one.
#'You should already be aware of it. So why do you need help?
#'
#' @param x A number.
#' @param y A Loxodonta cyclotis.
#' @param ... Whatever else you want, my friend!
#' @return The number of times \code{x} is contained within \code{y}. Do you want me to tell you once again?
#' @name div
#' @aliases "/" division
#' @export
'/' <- function(x,y){
warning("As long as I'm the boss here, division is not allowed! We have to stay together!")
paste( x, "and", y, "love each other. Try doing the same.")
}
52387/78
Inf/0
"me"/"you"
?div
?div
library("testthat", lib.loc="~/R/win-library/3.5")
detach("package:testthat", unload=TRUE)
library("testthat", lib.loc="~/R/win-library/3.5")
"a dog"/"a dog bone"
test_that( "division gives a message of love ", {
expect_equal( "a dog" / " bone", "a dog and a bone love each other. Try doing the same.")
})
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
"a dog"/"a dog bone"
devtools::check()
library(eviltools)
test_that("division is not allowed",{
expect_warning(7/1, "division is not allowed")
expect_warning("a"/1, "division is not allowed")
expect_warning(sample(1:199,3)/8, "division is not allowed")
})
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
test_that("mean gives an error if type is not 1 to 5",{
expect_error( mean( 1:5, type = 7), "joke")
expect_error( mean( 1:5, type = "a"))
expect_error( mean( 1:5, type = F))
expect_error( mean( 1:5, type = NULL), "argument")
})
test_that("mean gives a message when type == 1",{
expect_message( mean( 1:5, type = 1), "chosen")
})
test_that("mean gives the actual mean when type == 1",{
expect_equal( mean( 1:5, type = 1), base::mean(1:5) )
expect_equal( mean( 1234:4321, type = 1), base::mean(1234:4321) )
expect_equal( mean( NA , type = 1), base::mean(NA) )
})
test_that("mean works as I want when type == 2",{
expect_error( mean( 1:5, type = 2))
})
})
test_that("mean gives a message when type == 3",{
expect_message( mean( 1:5, type = 3), "Python")
})
test_that("mean works as I want when type == 2",{
expect_error( mean( 1:5, type = 2))
})
test_that("mean gives a message when type == 3",{
expect_message( mean( 1:5, type = 3), "Python")
})
test_that("mean gives a message when type == 4",{
expect_message( mean( 1:5, type = 4), "Music")
})
test_that("mean gives a message when type == 5",{
expect_message( mean( 1:5, type = 5), "want")
})
test_that("sum gives a warning when n is not logical",{
expect_warning(sum( n = "" ))
})
test_that("sum gives a message when n = F",{
expect_message(sum(n = F),"idea")
})
test_that("sum gives a warning when n = T",{
expect_warning(sum(n = T), "rainbow")
})
# 14 - Automated Checking -------------------------------------------------
library(testthat)
library(devtools)
devtools::check()
?mean
?mean
devtools::check()
?mean
devtools::check()
devtools::use_readme_rmd()
usethis::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
mean(x)
x <- 1:21
mean(x)
library(eviltools)
x <- 1:21
library(eviltools)
x <- 1:21
mean(x)
library( eviltools )
x <- 1:21
mean( x , type = 3 )
x / y
x <- 10:20
y <- 50:60
x / y
x <- sample(100, 1)
x / y
#okay. ho creato il Readme, ho fatto un ulteriore CMD check ed è tutto okay (0e/0w/0n)
#procedo con il commit in quanto ho cambiato praticamente tutto per fixare gli errori del CMD Check
#al capitolo 14 e ho, appunto, aggiunto README.Rmd e README.md più l'immagine logo_edited
file.choose()
#okay. ho creato il Readme, ho fatto un ulteriore CMD check ed è tutto okay (0e/0w/0n)
#procedo con il commit in quanto ho cambiato praticamente tutto per fixare gli errori del CMD Check
#al capitolo 14 e ho, appunto, aggiunto README.Rmd e README.md più l'immagine logo_edited
file.choose()
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
library("testthat", lib.loc="~/R/win-library/3.5")
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
library("eviltools", lib.loc="~/R/win-library/3.5")
test_that( "division gives a message of love ", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
})
test_that( "division gives a message of love and a warning", {
expect_equal( "a dog" / "a bone", "a dog and a bone love each other. Try doing the same.")
expect_warning( 2 / 8 , "together")
})
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_pkg()
mean(231)
library(eviltools)
mean(231)
styler:::style_active_file()
